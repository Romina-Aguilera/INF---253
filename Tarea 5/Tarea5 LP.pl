vecino(a, b).
vecino(a, c).
vecino(a, e).
vecino(b, c).
vecino(c, e).
vecino(c, d).
vecino(e, b).
vecino(f, b).
vecino(f, e).
vecino(f, g).
vecino(g, e).
vecino(h, g).
vecino(h, i).
vecino(h, j).
vecino(i, g).
vecino(j, g).
vecino(j, i).

% 1
% Verifica que exista un camino desde un nodo X a un nodo Y
%

puedellegar(X, Y):- vecino(X,Y).
puedellegar(X, Y):- vecino(X,Z),puedellegar(Z,Y).



% 2
% Verifica o encuentra todos los vecinos de un nodo
%

vecinos(X, L):- findall(Y,vecino(X,Y),L).



% 3
% verifica que una lista de nodos genere un camino correcto en el grafo
%

caminovalido([_]).
caminovalido([X,Y]):- vecino(X,Y).
caminovalido([E1,E2|R]):- vecino(E1,E2),caminovalido([E2|R]).



% Menor longitud
% Verifica cual es la lista de menos tamaño en una lista de listas
%

menor_longitud([L], L).
menor_longitud([L1, L2 | Lr], L) :-
    length(L1, Len1),
    length(L2, Len2),
    ( Len1 < Len2
      ->
      menor_longitud([L1 | Lr], L);
      menor_longitud([L2 | Lr], L)
    ).



%4
% Verifica o encuentra el camino mas corto de un nodo X a un nodo Y
%

caminomascorto(X, Y, [X, Y], _):- vecino(X, Y).
caminomascorto(X, Y , Ls, V):-
    findall(
        [X|Rt],
        (vecino(X, Zt),
         not(member(Zt, V)),
         caminomascorto(Zt, Y, Rt, [X|V])),
        Res),
    menor_longitud(Res, Ls).

caminomascorto(X, Y, L) :- caminomascorto(X, Y, L, []).











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































